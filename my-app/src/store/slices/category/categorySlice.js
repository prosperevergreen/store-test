import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
	addCategoryItem,
	getAllCategoryItems,
	modifyCategoryItem,
	deleteCategoryItem,
} from "./categoryUtils";

const initialState = {
	status: "loading",
	categoryItems: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const addCategoryItemAsync = createAsyncThunk(
	"category/addCategoryItem",
	async (data) => {
		const resData = await addCategoryItem(data);
		// The value we return becomes the `fulfilled` action payload
		return resData;
	}
);

export const getAllCategoryItemsAsync = createAsyncThunk(
	"category/getAllCategoryItems",
	async (data) => {
		const resData = await getAllCategoryItems(data);
		// The value we return becomes the `fulfilled` action payload
		return resData;
	}
);

export const modifyCategoryItemAsync = createAsyncThunk(
	"category/modifyCategoryItem",
	async (data) => {
		const resData = await modifyCategoryItem(data);
		// The value we return becomes the `fulfilled` action payload
		return resData;
	}
);

export const deleteCategoryItemAsync = createAsyncThunk(
	"category/deleteCategoryItem",
	async (data) => {
		const response = await deleteCategoryItem(data);
		// The value we return becomes the `fulfilled` action payload
		return response.data;
	}
);

export const categorySlice = createSlice({
	name: "category",
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		addItemToCategory: (state, action) => {
			const item = action.payload;
			state.categoryItems.push(item);
		},
		modifyItemInCategory: (state, action) => {
			const item = action.payload;
			state.categoryItems = state.categoryItems.map((categoryItem) =>
				categoryItem._id === item._id ? item : categoryItem
			);
		},
		deleteItemFromCategory: (state, action) => {
			const item = action.payload;
			state.categoryItems = state.categoryItems.filter(
				(categoryItem) => categoryItem._id !== item._id
			);
		},
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(addCategoryItemAsync.pending, (state) => {
				state.status = "loading";
			})
			.addCase(addCategoryItemAsync.fulfilled, (state, action) => {
				const categoryData = action.payload;
				state.status = "idle";
				state.categoryItems.push(categoryData);
			})
			.addCase(addCategoryItemAsync.rejected, (state) => {
				state.status = "error";
			})
			.addCase(getAllCategoryItemsAsync.pending, (state) => {
				state.status = "loading";
			})
			.addCase(getAllCategoryItemsAsync.fulfilled, (state, action) => {
				const categoryData = action.payload;
				state.status = "idle";
				state.categoryItems = categoryData;
			})
			.addCase(getAllCategoryItemsAsync.rejected, (state) => {
				state.status = "error";
			})
			.addCase(modifyCategoryItemAsync.pending, (state) => {
				state.status = "loading";
			})
			.addCase(modifyCategoryItemAsync.fulfilled, (state, action) => {
				const categoryData = action.payload;
				state.categoryItems = state.categoryItems.map((categoryItem) =>
					categoryItem._id === categoryData._id ? categoryData : categoryItem
				);
			})
			.addCase(modifyCategoryItemAsync.rejected, (state) => {
				state.status = "error";
			})
			.addCase(deleteCategoryItemAsync.pending, (state) => {
				state.status = "loading";
			})
			.addCase(deleteCategoryItemAsync.fulfilled, (state, action) => {
				const categoryData = action.payload;
				state.categoryItems = state.categoryItems.filter(
					(categoryItem) => categoryItem._id !== categoryData._id
				);
			})
			.addCase(deleteCategoryItemAsync.rejected, (state, action) => {
				state.status = "error";
			});
	},
});

export const { addItemToCategory, modifyItemInCategory, deleteItemFromCategory } = categorySlice.actions;

export default categorySlice.reducer;
