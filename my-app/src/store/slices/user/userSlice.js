import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
	registerUser,
	loginUser,
	savePersistantData,
	clearPersistantData,
} from "./userUtils";

const initialState = {
	status: "idle",
	token: "",
	user: null,
	isLoggedIn: false,
	currPage: "category",
	selectedItem: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const registerUserAsync = createAsyncThunk(
	"user/registerUser",
	async (userData) => {
		const data = await registerUser(userData);
		// The value we return becomes the `fulfilled` action payload
		return data;
	}
);

export const loginUserAsync = createAsyncThunk(
	"user/loginUser",
	async (userData) => {
		const data = await loginUser(userData);
		// The value we return becomes the `fulfilled` action payload
		return data;
	}
);

export const userSlice = createSlice({
	name: "user",
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		logoutUser: (state) => {
			state.status = "idle";
			state.token = "";
			state.user = null;
			state.isLoggedIn = false;
			clearPersistantData();
		},
		setPage: (state, action) => {
			state.currPage = action.payload;
		},
		setSelectedItem: (state, action) => {
			state.selectedItem = action.payload;
		},
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(registerUserAsync.pending, (state) => {
				state.status = "loading";
			})
			.addCase(registerUserAsync.fulfilled, (state, action) => {
				const userData = action.payload;
				savePersistantData("user", userData);
				state.token = userData.token;
				state.user = userData.user;
				state.status = "idle";
				state.isLoggedIn = true;
			})
			.addCase(registerUserAsync.rejected, (state) => {
				state.status = "error";
			})
			.addCase(loginUserAsync.pending, (state) => {
				state.status = "loading";
			})
			.addCase(loginUserAsync.fulfilled, (state, action) => {
				const userData = action.payload;
				savePersistantData("user", userData);
				state.token = userData.token;
				state.user = userData.user;
				state.status = "idle";
				state.isLoggedIn = true;
			})
			.addCase(loginUserAsync.rejected, (state) => {
				state.status = "error";
			});
	},
});

export const { logoutUser, setPage, setSelectedItem } = userSlice.actions;

export default userSlice.reducer;
